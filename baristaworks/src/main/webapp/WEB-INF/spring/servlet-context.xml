<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

	<context:component-scan base-package="kr.co.baristaworks">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository" />
	</context:component-scan>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- JSR-303 support will be detected on classpath and enabled automatically -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<mvc:interceptors>
		<!-- <bean class="kr.co.baristaworks.fw.web.interceptor.LoggingHandlerMethodInterceptor" /> -->
		<bean class="kr.co.baristaworks.fw.web.interceptor.LoggingRequestInterceptor" />
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="locale" />
	</mvc:interceptors>

	<!-- selects a static view for rendering without the need for an explicit controller -->
	<!-- <mvc:view-controller path="/" view-name="index" /> -->
	<mvc:view-controller path="/uncaughtException" />
	<mvc:view-controller path="/resourceNotFound" />
	<mvc:view-controller path="/dataAccessFailure" />

	<!-- Resolves localized messages*.properties and application.properties 
		files in the application to allow for internationalization. The messages*.properties 
		files translate Roo generated messages which are part of the admin interface, 
		the application.properties resource bundle localizes all application specific 
		messages such as entity names and menu items. -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
		p:basenames="/WEB-INF/i18n/application, /WEB-INF/i18n/messages"
		p:fallbackToSystemLocale="false" />

	<!-- store preferred language configuration in a cookie -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
		p:cookieName="locale" p:defaultLocale="ko" />
		
		
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="customArgumentResolvers">
			<list>
				<bean class="org.springframework.data.web.PageableArgumentResolver" />
			</list>
		</property>
	</bean>

	<!-- This bean resolves specific types of exceptions to corresponding logical 
		- view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"
		p:defaultErrorView="uncaughtException">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
				<prop key=".TypeMismatchException">resourceNotFound</prop>
				<prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
				<prop key=".ServiceException">uncaughtException</prop>
			</props>
		</property>
	</bean>
	
	<!-- allows for integration of file upload functionality -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
	
	<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver" >
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
		<property name="order" value="1"/>
	</bean>
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/layouts/layouts.xml</value>
				<value>/WEB-INF/views/**/views.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
	
	<bean id="parameterizableViewController" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
		<property name="viewName" value="comingSoon"/>
	</bean>
	
	<bean id="urlFilenameViewController" class="org.springframework.web.servlet.mvc.UrlFilenameViewController"/>
	<bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<bean class="org.springframework.beans.factory.config.PropertiesFactoryBean">
				<property name="location">
					<value>/WEB-INF/url-mapping.properties</value>
				</property>
			</bean>
		</property>
	</bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="9"/>
	</bean>
	
	<!-- AOP를 통한 Controller 로그 남기기 -->
	<aop:config>
		<aop:aspect id="systemLoggingAspect" ref="systemLogging">
			<aop:around pointcut="execution(public * kr.co.baristaworks..*Controller.*(..))" method="loggingController" />
		</aop:aspect>
		<aop:aspect id="throwExceptionAspect" ref="throwException">
			<aop:after-throwing pointcut="execution(public * kr.co.baristaworks..*Controller.*(..))" method="throwException" throwing="ex"/>
		</aop:aspect>
	</aop:config>
	
</beans>
